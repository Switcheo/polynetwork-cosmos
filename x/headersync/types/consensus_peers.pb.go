// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: headersync/consensus_peers.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Peer struct {
	Index  uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Pubkey string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d7b41d5847534ac, []int{0}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return m.Size()
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

type ConsensusPeers struct {
	ChainId uint64           `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	Height  uint32           `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Peers   map[string]*Peer `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ConsensusPeers) Reset()         { *m = ConsensusPeers{} }
func (m *ConsensusPeers) String() string { return proto.CompactTextString(m) }
func (*ConsensusPeers) ProtoMessage()    {}
func (*ConsensusPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d7b41d5847534ac, []int{1}
}
func (m *ConsensusPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusPeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusPeers.Merge(m, src)
}
func (m *ConsensusPeers) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusPeers.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusPeers proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Peer)(nil), "Switcheo.carbon.headersync.Peer")
	proto.RegisterType((*ConsensusPeers)(nil), "Switcheo.carbon.headersync.ConsensusPeers")
	proto.RegisterMapType((map[string]*Peer)(nil), "Switcheo.carbon.headersync.ConsensusPeers.PeersEntry")
}

func init() { proto.RegisterFile("headersync/consensus_peers.proto", fileDescriptor_5d7b41d5847534ac) }

var fileDescriptor_5d7b41d5847534ac = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0xbd, 0x4e, 0xeb, 0x30,
	0x14, 0x8e, 0xfb, 0x77, 0xef, 0x75, 0xd5, 0x0b, 0x0a, 0x15, 0xaa, 0x3a, 0xa4, 0x51, 0xa6, 0x2e,
	0x38, 0x52, 0x11, 0x08, 0x32, 0x16, 0x31, 0x20, 0x16, 0x94, 0x6e, 0x5d, 0xaa, 0xfc, 0x1c, 0x25,
	0x51, 0x5b, 0x3b, 0xb2, 0x1d, 0xda, 0x3c, 0x01, 0x8c, 0x3c, 0x02, 0x8f, 0xc3, 0xd8, 0x91, 0x09,
	0xa1, 0xf6, 0x0d, 0x78, 0x02, 0x14, 0xa7, 0x55, 0x61, 0x80, 0xc5, 0x3a, 0x9f, 0x7d, 0xce, 0xf7,
	0xe3, 0x83, 0xcd, 0x18, 0xbc, 0x10, 0xb8, 0xc8, 0x69, 0x60, 0x07, 0x8c, 0x0a, 0xa0, 0x22, 0x13,
	0x93, 0x14, 0x80, 0x0b, 0x92, 0x72, 0x26, 0x99, 0xde, 0x1d, 0x2d, 0x12, 0x19, 0xc4, 0xc0, 0x48,
	0xe0, 0x71, 0x9f, 0x51, 0xb2, 0x9f, 0xe8, 0xb6, 0x23, 0x16, 0x31, 0xd5, 0x66, 0x17, 0x55, 0x39,
	0x61, 0x39, 0xb8, 0x76, 0x07, 0xc0, 0xf5, 0x36, 0xae, 0x27, 0x34, 0x84, 0x65, 0x07, 0x99, 0xa8,
	0xdf, 0x72, 0x4b, 0xa0, 0x1f, 0xe3, 0x46, 0x9a, 0xf9, 0x53, 0xc8, 0x3b, 0x15, 0x13, 0xf5, 0xff,
	0xb9, 0x5b, 0xe4, 0xd4, 0x1e, 0x9f, 0x7b, 0x9a, 0xf5, 0x50, 0xc1, 0xff, 0xaf, 0x76, 0x3e, 0x0a,
	0x16, 0xa1, 0x13, 0xfc, 0x37, 0x88, 0xbd, 0x84, 0x4e, 0x92, 0x50, 0x31, 0xd5, 0x86, 0x47, 0x1f,
	0x6f, 0xbd, 0x83, 0xdc, 0x9b, 0xcf, 0x1c, 0x6b, 0xf7, 0x62, 0xb9, 0x7f, 0x54, 0x79, 0x13, 0x16,
	0x02, 0x31, 0x24, 0x51, 0x2c, 0x95, 0x40, 0xcb, 0xdd, 0x22, 0xfd, 0x16, 0xd7, 0x55, 0xae, 0x4e,
	0xd5, 0xac, 0xf6, 0x9b, 0x83, 0x33, 0xf2, 0x73, 0x30, 0xf2, 0xdd, 0x02, 0x51, 0xe7, 0x35, 0x95,
	0x3c, 0x77, 0x4b, 0x8e, 0xee, 0x18, 0xe3, 0xfd, 0xa5, 0x7e, 0x88, 0xab, 0x45, 0x20, 0xa4, 0x02,
	0x15, 0xa5, 0x7e, 0x8e, 0xeb, 0xf7, 0xde, 0x2c, 0x03, 0xe5, 0xa1, 0x39, 0x30, 0x7f, 0x13, 0x2b,
	0x88, 0xdc, 0xb2, 0xdd, 0xa9, 0x5c, 0xa0, 0xf2, 0x27, 0x86, 0xa3, 0x97, 0xb5, 0x81, 0x56, 0x6b,
	0x03, 0xbd, 0xaf, 0x0d, 0xf4, 0xb4, 0x31, 0xb4, 0xd5, 0xc6, 0xd0, 0x5e, 0x37, 0x86, 0x36, 0xbe,
	0x8c, 0x12, 0x19, 0x67, 0x3e, 0x09, 0xd8, 0xdc, 0xde, 0xd1, 0xda, 0x29, 0x9b, 0xe5, 0x14, 0xe4,
	0x82, 0xf1, 0xe9, 0x49, 0xc0, 0xc4, 0x9c, 0x09, 0x7b, 0x69, 0x7f, 0x59, 0xae, 0xcc, 0x53, 0x10,
	0x7e, 0x43, 0x6d, 0xe8, 0xf4, 0x33, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x59, 0x86, 0x8b, 0xf7, 0x01,
	0x00, 0x00,
}

func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintConsensusPeers(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintConsensusPeers(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for k := range m.Peers {
			v := m.Peers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintConsensusPeers(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintConsensusPeers(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintConsensusPeers(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Height != 0 {
		i = encodeVarintConsensusPeers(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintConsensusPeers(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConsensusPeers(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsensusPeers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovConsensusPeers(uint64(m.Index))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovConsensusPeers(uint64(l))
	}
	return n
}

func (m *ConsensusPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovConsensusPeers(uint64(m.ChainId))
	}
	if m.Height != 0 {
		n += 1 + sovConsensusPeers(uint64(m.Height))
	}
	if len(m.Peers) > 0 {
		for k, v := range m.Peers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovConsensusPeers(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovConsensusPeers(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovConsensusPeers(uint64(mapEntrySize))
		}
	}
	return n
}

func sovConsensusPeers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsensusPeers(x uint64) (n int) {
	return sovConsensusPeers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensusPeers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusPeers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensusPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensusPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensusPeers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensusPeers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peers == nil {
				m.Peers = make(map[string]*Peer)
			}
			var mapkey string
			var mapvalue *Peer
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConsensusPeers
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConsensusPeers
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthConsensusPeers
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthConsensusPeers
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConsensusPeers
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthConsensusPeers
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthConsensusPeers
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Peer{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConsensusPeers(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConsensusPeers
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Peers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensusPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensusPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsensusPeers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsensusPeers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensusPeers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensusPeers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsensusPeers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsensusPeers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsensusPeers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsensusPeers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsensusPeers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsensusPeers = fmt.Errorf("proto: unexpected end of group")
)
