// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Switcheo/carbon/btcx/denom_cross_chain_info.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DenomCrossChainInfo struct {
	DenomInfo   DenomInfo `protobuf:"bytes,1,opt,name=denom_info,json=denomInfo,proto3" json:"denom_info" yaml:"denom_info"`
	ToChainId   uint64    `protobuf:"varint,2,opt,name=to_chain_id,json=toChainId,proto3" json:"to_chain_id,omitempty" yaml:"to_chain_id"`
	ToAssetHash string    `protobuf:"bytes,3,opt,name=to_asset_hash,json=toAssetHash,proto3" json:"to_asset_hash,omitempty" yaml:"to_asset_hash"`
}

func (m *DenomCrossChainInfo) Reset()         { *m = DenomCrossChainInfo{} }
func (m *DenomCrossChainInfo) String() string { return proto.CompactTextString(m) }
func (*DenomCrossChainInfo) ProtoMessage()    {}
func (*DenomCrossChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cad667ded05d489c, []int{0}
}
func (m *DenomCrossChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomCrossChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomCrossChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomCrossChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomCrossChainInfo.Merge(m, src)
}
func (m *DenomCrossChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *DenomCrossChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomCrossChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DenomCrossChainInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DenomCrossChainInfo)(nil), "Switcheo.carbon.btcx.DenomCrossChainInfo")
}

func init() {
	proto.RegisterFile("Switcheo/carbon/btcx/denom_cross_chain_info.proto", fileDescriptor_cad667ded05d489c)
}

var fileDescriptor_cad667ded05d489c = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x18, 0x85, 0x63, 0xa8, 0x90, 0x9a, 0x8a, 0x81, 0x50, 0xa1, 0xd0, 0x21, 0xa9, 0x22, 0x21, 0x75,
	0xc1, 0x16, 0x54, 0x62, 0xa8, 0x58, 0x48, 0x19, 0x60, 0x60, 0x29, 0x13, 0x2c, 0x91, 0xe3, 0xa4,
	0x75, 0x44, 0xe3, 0xbf, 0x8a, 0x8d, 0xda, 0xde, 0x80, 0x91, 0x23, 0x70, 0x9c, 0x8e, 0x1d, 0x99,
	0x22, 0xd4, 0xae, 0x4c, 0x3d, 0x01, 0x72, 0xa3, 0x34, 0x0c, 0x88, 0xcd, 0xf6, 0xff, 0xbe, 0xf7,
	0xfc, 0x3f, 0xf3, 0xe2, 0x71, 0x9a, 0x28, 0xc6, 0x63, 0x20, 0x8c, 0x66, 0x21, 0x08, 0x12, 0x2a,
	0x36, 0x23, 0x51, 0x2c, 0x20, 0x0d, 0x58, 0x06, 0x52, 0x06, 0x8c, 0xd3, 0x44, 0x04, 0x89, 0x18,
	0x02, 0x9e, 0x64, 0xa0, 0xc0, 0x6a, 0x96, 0x08, 0x2e, 0x10, 0xac, 0x91, 0x56, 0x73, 0x04, 0x23,
	0xd8, 0x0a, 0x88, 0x3e, 0x15, 0xda, 0xd6, 0xd9, 0x3f, 0xf6, 0x95, 0xa5, 0xf7, 0x8d, 0xcc, 0xe3,
	0x5b, 0xfd, 0xd8, 0xd7, 0x91, 0x7d, 0x9d, 0x78, 0x2f, 0x86, 0x60, 0x3d, 0x99, 0x66, 0xa5, 0xb5,
	0x51, 0x1b, 0x75, 0x1a, 0x97, 0x2e, 0xfe, 0x2b, 0x1f, 0x6f, 0x71, 0x0d, 0xf9, 0xa7, 0x8b, 0xdc,
	0x35, 0x36, 0xb9, 0x7b, 0x34, 0xa7, 0xe9, 0xb8, 0xe7, 0x55, 0x06, 0xde, 0xa0, 0x1e, 0x95, 0x2a,
	0xeb, 0xca, 0x6c, 0x28, 0x28, 0x97, 0x8b, 0xec, 0xbd, 0x36, 0xea, 0xd4, 0xfc, 0x93, 0x4d, 0xee,
	0x5a, 0x05, 0xf6, 0x6b, 0xe8, 0x0d, 0xea, 0x0a, 0x8a, 0x4f, 0x45, 0xd6, 0xb5, 0x79, 0xa8, 0x20,
	0xa0, 0x52, 0xc6, 0x2a, 0xe0, 0x54, 0x72, 0x7b, 0xbf, 0x8d, 0x3a, 0x75, 0xdf, 0xde, 0xe4, 0x6e,
	0x73, 0x47, 0x56, 0x63, 0x6f, 0xd0, 0x50, 0x70, 0xa3, 0xaf, 0x77, 0x54, 0xf2, 0x5e, 0xed, 0xed,
	0xc3, 0x35, 0xfc, 0x87, 0xc5, 0xca, 0x41, 0xcb, 0x95, 0x83, 0xbe, 0x56, 0x0e, 0x7a, 0x5f, 0x3b,
	0xc6, 0x72, 0xed, 0x18, 0x9f, 0x6b, 0xc7, 0x78, 0xee, 0x8e, 0x12, 0xc5, 0x5f, 0x43, 0xcc, 0x20,
	0x25, 0xbb, 0xea, 0x26, 0x30, 0x9e, 0x8b, 0x58, 0x4d, 0x21, 0x7b, 0x39, 0x67, 0x20, 0x53, 0x90,
	0x64, 0x56, 0x14, 0xa9, 0xe6, 0x93, 0x58, 0x86, 0x07, 0xdb, 0x12, 0xbb, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xa3, 0xc7, 0xe2, 0x5d, 0xcc, 0x01, 0x00, 0x00,
}

func (m *DenomCrossChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomCrossChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomCrossChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAssetHash) > 0 {
		i -= len(m.ToAssetHash)
		copy(dAtA[i:], m.ToAssetHash)
		i = encodeVarintDenomCrossChainInfo(dAtA, i, uint64(len(m.ToAssetHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ToChainId != 0 {
		i = encodeVarintDenomCrossChainInfo(dAtA, i, uint64(m.ToChainId))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.DenomInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDenomCrossChainInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDenomCrossChainInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovDenomCrossChainInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DenomCrossChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DenomInfo.Size()
	n += 1 + l + sovDenomCrossChainInfo(uint64(l))
	if m.ToChainId != 0 {
		n += 1 + sovDenomCrossChainInfo(uint64(m.ToChainId))
	}
	l = len(m.ToAssetHash)
	if l > 0 {
		n += 1 + l + sovDenomCrossChainInfo(uint64(l))
	}
	return n
}

func sovDenomCrossChainInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDenomCrossChainInfo(x uint64) (n int) {
	return sovDenomCrossChainInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DenomCrossChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenomCrossChainInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomCrossChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomCrossChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomCrossChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDenomCrossChainInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDenomCrossChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DenomInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChainId", wireType)
			}
			m.ToChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomCrossChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAssetHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomCrossChainInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomCrossChainInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomCrossChainInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAssetHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDenomCrossChainInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenomCrossChainInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDenomCrossChainInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDenomCrossChainInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDenomCrossChainInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDenomCrossChainInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDenomCrossChainInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDenomCrossChainInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDenomCrossChainInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDenomCrossChainInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDenomCrossChainInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDenomCrossChainInfo = fmt.Errorf("proto: unexpected end of group")
)
