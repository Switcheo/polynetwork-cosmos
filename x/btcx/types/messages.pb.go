// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: btcx/messages.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DenomInfo struct {
	Creator          string          `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id               string          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Denom            string          `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	AssetHash        string          `protobuf:"bytes,4,opt,name=assetHash,proto3" json:"assetHash,omitempty"`
	TotalSupply      *types.IntProto `protobuf:"bytes,5,opt,name=totalSupply,proto3" json:"totalSupply,omitempty"`
	RedeemScript     string          `protobuf:"bytes,6,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	RedeemScriptHash string          `protobuf:"bytes,7,opt,name=redeemScriptHash,proto3" json:"redeemScriptHash,omitempty"`
}

func (m *DenomInfo) Reset()         { *m = DenomInfo{} }
func (m *DenomInfo) String() string { return proto.CompactTextString(m) }
func (*DenomInfo) ProtoMessage()    {}
func (*DenomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_94d392aeb8839a84, []int{0}
}
func (m *DenomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomInfo.Merge(m, src)
}
func (m *DenomInfo) XXX_Size() int {
	return m.Size()
}
func (m *DenomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DenomInfo proto.InternalMessageInfo

func (m *DenomInfo) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *DenomInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DenomInfo) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomInfo) GetAssetHash() string {
	if m != nil {
		return m.AssetHash
	}
	return ""
}

func (m *DenomInfo) GetTotalSupply() *types.IntProto {
	if m != nil {
		return m.TotalSupply
	}
	return nil
}

func (m *DenomInfo) GetRedeemScript() string {
	if m != nil {
		return m.RedeemScript
	}
	return ""
}

func (m *DenomInfo) GetRedeemScriptHash() string {
	if m != nil {
		return m.RedeemScriptHash
	}
	return ""
}

type DenomCrossChainInfo struct {
	DenomInfo   *DenomInfo `protobuf:"bytes,1,opt,name=denomInfo,proto3" json:"denomInfo,omitempty"`
	ToChainId   uint64     `protobuf:"varint,2,opt,name=toChainId,proto3" json:"toChainId,omitempty"`
	ToAssetHash string     `protobuf:"bytes,3,opt,name=toAssetHash,proto3" json:"toAssetHash,omitempty"`
}

func (m *DenomCrossChainInfo) Reset()         { *m = DenomCrossChainInfo{} }
func (m *DenomCrossChainInfo) String() string { return proto.CompactTextString(m) }
func (*DenomCrossChainInfo) ProtoMessage()    {}
func (*DenomCrossChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_94d392aeb8839a84, []int{1}
}
func (m *DenomCrossChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomCrossChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomCrossChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomCrossChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomCrossChainInfo.Merge(m, src)
}
func (m *DenomCrossChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *DenomCrossChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomCrossChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DenomCrossChainInfo proto.InternalMessageInfo

func (m *DenomCrossChainInfo) GetDenomInfo() *DenomInfo {
	if m != nil {
		return m.DenomInfo
	}
	return nil
}

func (m *DenomCrossChainInfo) GetToChainId() uint64 {
	if m != nil {
		return m.ToChainId
	}
	return 0
}

func (m *DenomCrossChainInfo) GetToAssetHash() string {
	if m != nil {
		return m.ToAssetHash
	}
	return ""
}

type MsgCreateDenom struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom        string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	RedeemScript string `protobuf:"bytes,3,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
}

func (m *MsgCreateDenom) Reset()         { *m = MsgCreateDenom{} }
func (m *MsgCreateDenom) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDenom) ProtoMessage()    {}
func (*MsgCreateDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_94d392aeb8839a84, []int{2}
}
func (m *MsgCreateDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDenom.Merge(m, src)
}
func (m *MsgCreateDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDenom proto.InternalMessageInfo

func (m *MsgCreateDenom) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgCreateDenom) GetRedeemScript() string {
	if m != nil {
		return m.RedeemScript
	}
	return ""
}

type MsgBindAssetHash struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SourceAssetDenom string `protobuf:"bytes,2,opt,name=sourceAssetDenom,proto3" json:"sourceAssetDenom,omitempty"`
	ToChainId        uint64 `protobuf:"varint,3,opt,name=toChainId,proto3" json:"toChainId,omitempty"`
	ToAssetHash      []byte `protobuf:"bytes,4,opt,name=toAssetHash,proto3" json:"toAssetHash,omitempty"`
}

func (m *MsgBindAssetHash) Reset()         { *m = MsgBindAssetHash{} }
func (m *MsgBindAssetHash) String() string { return proto.CompactTextString(m) }
func (*MsgBindAssetHash) ProtoMessage()    {}
func (*MsgBindAssetHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_94d392aeb8839a84, []int{3}
}
func (m *MsgBindAssetHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBindAssetHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBindAssetHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBindAssetHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBindAssetHash.Merge(m, src)
}
func (m *MsgBindAssetHash) XXX_Size() int {
	return m.Size()
}
func (m *MsgBindAssetHash) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBindAssetHash.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBindAssetHash proto.InternalMessageInfo

func (m *MsgBindAssetHash) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBindAssetHash) GetSourceAssetDenom() string {
	if m != nil {
		return m.SourceAssetDenom
	}
	return ""
}

func (m *MsgBindAssetHash) GetToChainId() uint64 {
	if m != nil {
		return m.ToChainId
	}
	return 0
}

func (m *MsgBindAssetHash) GetToAssetHash() []byte {
	if m != nil {
		return m.ToAssetHash
	}
	return nil
}

type MsgLock struct {
	FromAddress      string          `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	SourceAssetDenom string          `protobuf:"bytes,2,opt,name=sourceAssetDenom,proto3" json:"sourceAssetDenom,omitempty"`
	ToChainId        uint64          `protobuf:"varint,3,opt,name=toChainId,proto3" json:"toChainId,omitempty"`
	ToAddressBs      []byte          `protobuf:"bytes,4,opt,name=toAddressBs,proto3" json:"toAddressBs,omitempty"`
	Value            *types.IntProto `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgLock) Reset()         { *m = MsgLock{} }
func (m *MsgLock) String() string { return proto.CompactTextString(m) }
func (*MsgLock) ProtoMessage()    {}
func (*MsgLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_94d392aeb8839a84, []int{4}
}
func (m *MsgLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLock.Merge(m, src)
}
func (m *MsgLock) XXX_Size() int {
	return m.Size()
}
func (m *MsgLock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLock proto.InternalMessageInfo

func (m *MsgLock) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgLock) GetSourceAssetDenom() string {
	if m != nil {
		return m.SourceAssetDenom
	}
	return ""
}

func (m *MsgLock) GetToChainId() uint64 {
	if m != nil {
		return m.ToChainId
	}
	return 0
}

func (m *MsgLock) GetToAddressBs() []byte {
	if m != nil {
		return m.ToAddressBs
	}
	return nil
}

func (m *MsgLock) GetValue() *types.IntProto {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*DenomInfo)(nil), "Switcheo.polynetworkcosmos.btcx.DenomInfo")
	proto.RegisterType((*DenomCrossChainInfo)(nil), "Switcheo.polynetworkcosmos.btcx.DenomCrossChainInfo")
	proto.RegisterType((*MsgCreateDenom)(nil), "Switcheo.polynetworkcosmos.btcx.MsgCreateDenom")
	proto.RegisterType((*MsgBindAssetHash)(nil), "Switcheo.polynetworkcosmos.btcx.MsgBindAssetHash")
	proto.RegisterType((*MsgLock)(nil), "Switcheo.polynetworkcosmos.btcx.MsgLock")
}

func init() { proto.RegisterFile("btcx/messages.proto", fileDescriptor_94d392aeb8839a84) }

var fileDescriptor_94d392aeb8839a84 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0xb3, 0x10, 0x82, 0x58, 0xa2, 0x08, 0x6d, 0x7a, 0xb0, 0xaa, 0xd6, 0x45, 0x3e, 0x45,
	0x48, 0xb5, 0x95, 0xf0, 0x00, 0x55, 0x20, 0x87, 0x44, 0x2a, 0x52, 0x05, 0xb7, 0xde, 0xd6, 0xf6,
	0xc4, 0x58, 0xc1, 0x1e, 0x6b, 0x67, 0x49, 0xc2, 0x5b, 0xf4, 0xd8, 0x5b, 0x5f, 0xa7, 0x87, 0x1e,
	0x72, 0xec, 0xb1, 0x82, 0xb7, 0xe8, 0xa9, 0xf2, 0x1a, 0x83, 0x29, 0x52, 0xd2, 0x43, 0x8f, 0xf3,
	0x31, 0x7f, 0x3e, 0x7e, 0x33, 0x6b, 0x7e, 0xea, 0xeb, 0xe0, 0xd1, 0x4b, 0x80, 0x48, 0x46, 0x40,
	0x6e, 0xa6, 0x50, 0xa3, 0x78, 0x37, 0x79, 0x88, 0x75, 0x30, 0x05, 0x74, 0x33, 0x9c, 0x2d, 0x52,
	0xd0, 0x0f, 0xa8, 0xee, 0x02, 0xa4, 0x04, 0xc9, 0xcd, 0xf3, 0x5f, 0xdb, 0x45, 0xe0, 0xf9, 0x92,
	0xc0, 0xbb, 0x3f, 0xf7, 0x41, 0xcb, 0x73, 0x2f, 0xc0, 0x38, 0x2d, 0x1a, 0x38, 0xbf, 0x19, 0x6f,
	0x5d, 0x41, 0x8a, 0xc9, 0x4d, 0x7a, 0x8b, 0xc2, 0xe2, 0xcd, 0x40, 0x81, 0xd4, 0xa8, 0x2c, 0xd6,
	0x65, 0x67, 0xad, 0x71, 0x19, 0x8a, 0x13, 0x5e, 0x8b, 0x43, 0xab, 0x66, 0xc4, 0x5a, 0x1c, 0x8a,
	0x57, 0xbc, 0x11, 0xe6, 0x65, 0x56, 0xdd, 0x48, 0x45, 0x20, 0xde, 0xf0, 0x96, 0x24, 0x02, 0x7d,
	0x2d, 0x69, 0x6a, 0x1d, 0x9a, 0x5f, 0xb6, 0x82, 0xf8, 0xc0, 0xdb, 0x1a, 0xb5, 0x9c, 0x4d, 0xe6,
	0x59, 0x36, 0x5b, 0x58, 0x8d, 0x2e, 0x3b, 0x6b, 0x5f, 0xbc, 0x75, 0x4b, 0xbb, 0x92, 0xc0, 0x5d,
	0x3b, 0x74, 0x6f, 0x52, 0xfd, 0x29, 0xf7, 0x37, 0xae, 0x56, 0x08, 0x87, 0x1f, 0x2b, 0x08, 0x01,
	0x92, 0x49, 0xa0, 0xe2, 0x4c, 0x5b, 0x47, 0x66, 0xc2, 0x8e, 0x26, 0x7a, 0xbc, 0x53, 0x8d, 0x8d,
	0x93, 0xa6, 0xc9, 0xdb, 0xd3, 0x9d, 0x6f, 0x8c, 0x9f, 0x9a, 0x3f, 0x3f, 0x54, 0x48, 0x34, 0x9c,
	0xca, 0x38, 0x35, 0x18, 0xae, 0x79, 0x2b, 0x2c, 0x99, 0x18, 0x10, 0xed, 0x8b, 0x9e, 0xfb, 0x02,
	0x69, 0x77, 0x43, 0x71, 0xbc, 0x2d, 0xce, 0x81, 0x68, 0x2c, 0x1a, 0x17, 0xf4, 0x0e, 0xc7, 0x5b,
	0x41, 0x74, 0x73, 0x20, 0x97, 0x1b, 0x60, 0x05, 0xca, 0xaa, 0xe4, 0x84, 0xfc, 0x64, 0x44, 0xd1,
	0x30, 0x5f, 0x02, 0x98, 0x01, 0xcf, 0xac, 0x68, 0xb3, 0x92, 0x5a, 0x75, 0x25, 0x7f, 0x33, 0xab,
	0xef, 0x33, 0x73, 0xbe, 0x32, 0xde, 0x19, 0x51, 0x34, 0x88, 0xd3, 0x70, 0x33, 0xfa, 0x99, 0x41,
	0x3d, 0xde, 0x21, 0x9c, 0xab, 0x00, 0x4c, 0xf2, 0x55, 0x65, 0xe6, 0x9e, 0xbe, 0x0b, 0xa0, 0xfe,
	0x02, 0x80, 0xfc, 0x62, 0x8e, 0x77, 0x01, 0xfc, 0x60, 0xbc, 0x39, 0xa2, 0xe8, 0x23, 0x06, 0x77,
	0x79, 0xf6, 0xad, 0xc2, 0xe4, 0x32, 0x0c, 0x15, 0x10, 0xad, 0x5d, 0x55, 0xa5, 0xff, 0xee, 0xac,
	0x68, 0x3b, 0xa0, 0x8a, 0xb3, 0x52, 0x12, 0x7d, 0xde, 0xb8, 0x97, 0xb3, 0x39, 0xfc, 0xdb, 0x1d,
	0x17, 0xb9, 0x83, 0xd1, 0xf7, 0xa5, 0xcd, 0x9e, 0x96, 0x36, 0xfb, 0xb5, 0xb4, 0xd9, 0x97, 0x95,
	0x7d, 0xf0, 0xb4, 0xb2, 0x0f, 0x7e, 0xae, 0xec, 0x83, 0xcf, 0xfd, 0x28, 0xd6, 0xd3, 0xb9, 0xef,
	0x06, 0x98, 0x78, 0xe5, 0xa9, 0x79, 0x95, 0x53, 0x7b, 0xbf, 0x7e, 0xc8, 0x8f, 0x9e, 0xf9, 0x0e,
	0xe8, 0x45, 0x06, 0xe4, 0x1f, 0x99, 0x47, 0xdc, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xf1,
	0x89, 0xba, 0x1c, 0x04, 0x00, 0x00,
}

func (m *DenomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedeemScriptHash) > 0 {
		i -= len(m.RedeemScriptHash)
		copy(dAtA[i:], m.RedeemScriptHash)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.RedeemScriptHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RedeemScript) > 0 {
		i -= len(m.RedeemScript)
		copy(dAtA[i:], m.RedeemScript)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.RedeemScript)))
		i--
		dAtA[i] = 0x32
	}
	if m.TotalSupply != nil {
		{
			size, err := m.TotalSupply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AssetHash) > 0 {
		i -= len(m.AssetHash)
		copy(dAtA[i:], m.AssetHash)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.AssetHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomCrossChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomCrossChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomCrossChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAssetHash) > 0 {
		i -= len(m.ToAssetHash)
		copy(dAtA[i:], m.ToAssetHash)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ToAssetHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ToChainId != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.ToChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.DenomInfo != nil {
		{
			size, err := m.DenomInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedeemScript) > 0 {
		i -= len(m.RedeemScript)
		copy(dAtA[i:], m.RedeemScript)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.RedeemScript)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBindAssetHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBindAssetHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBindAssetHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ToAssetHash) > 0 {
		i -= len(m.ToAssetHash)
		copy(dAtA[i:], m.ToAssetHash)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ToAssetHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.ToChainId != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.ToChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceAssetDenom) > 0 {
		i -= len(m.SourceAssetDenom)
		copy(dAtA[i:], m.SourceAssetDenom)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.SourceAssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ToAddressBs) > 0 {
		i -= len(m.ToAddressBs)
		copy(dAtA[i:], m.ToAddressBs)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ToAddressBs)))
		i--
		dAtA[i] = 0x22
	}
	if m.ToChainId != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.ToChainId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SourceAssetDenom) > 0 {
		i -= len(m.SourceAssetDenom)
		copy(dAtA[i:], m.SourceAssetDenom)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.SourceAssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DenomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.AssetHash)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.TotalSupply != nil {
		l = m.TotalSupply.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.RedeemScript)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.RedeemScriptHash)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *DenomCrossChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DenomInfo != nil {
		l = m.DenomInfo.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.ToChainId != 0 {
		n += 1 + sovMessages(uint64(m.ToChainId))
	}
	l = len(m.ToAssetHash)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgCreateDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.RedeemScript)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgBindAssetHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.SourceAssetDenom)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.ToChainId != 0 {
		n += 1 + sovMessages(uint64(m.ToChainId))
	}
	l = len(m.ToAssetHash)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.SourceAssetDenom)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.ToChainId != 0 {
		n += 1 + sovMessages(uint64(m.ToChainId))
	}
	l = len(m.ToAddressBs)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DenomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalSupply == nil {
				m.TotalSupply = &types.IntProto{}
			}
			if err := m.TotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemScriptHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemScriptHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomCrossChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomCrossChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomCrossChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomInfo == nil {
				m.DenomInfo = &DenomInfo{}
			}
			if err := m.DenomInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChainId", wireType)
			}
			m.ToChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAssetHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAssetHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBindAssetHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBindAssetHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBindAssetHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChainId", wireType)
			}
			m.ToChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAssetHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAssetHash = append(m.ToAssetHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAssetHash == nil {
				m.ToAssetHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChainId", wireType)
			}
			m.ToChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddressBs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddressBs = append(m.ToAddressBs[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddressBs == nil {
				m.ToAddressBs = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.IntProto{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
