syntax = "proto3";
package Switcheo.carbon.btcx;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Switcheo/carbon/x/btcx/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // this line is used by starport scaffolding # proto/tx/rpc
  rpc Create(MsgCreate) returns (MsgCreateResponse);
  rpc Bind(MsgBind) returns (MsgBindResponse);
  rpc Lock(MsgLock) returns (MsgLockResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgCreate {
  option (cosmos.msg.v1.signer) = "creator";
  option (gogoproto.goproto_getters) = false;

  string creator = 1;
  string denom = 2;
  string redeem_script = 3;
}

message MsgCreateResponse {}

message MsgBind {
  option (cosmos.msg.v1.signer) = "creator";
  option (gogoproto.goproto_getters) = false;

  string creator = 1;
  string source_asset_denom = 2;
  uint64 to_chain_id = 3;
  bytes to_asset_hash = 4;
}

message MsgBindResponse {}

message MsgLock {
  option (cosmos.msg.v1.signer) = "from_address";
  option (gogoproto.goproto_getters) = false;

  string from_address = 1;
  string source_asset_denom = 2;
  uint64 to_chain_id = 3;
  bytes to_address_bytes = 4;
  string value = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgLockResponse {}
