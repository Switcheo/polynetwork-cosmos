syntax = "proto3";
package Switcheo.carbon.btcx;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Switcheo/polynetwork-cosmos/x/btcx/types";

// Msg defines the Msg service.
service Msg {
    // this line is used by starport scaffolding # proto/tx/rpc
  rpc Create(MsgCreate) returns (MsgCreateResponse);
  rpc Bind(MsgBind) returns (MsgBindResponse);
  rpc Lock(MsgLock) returns (MsgLockResponse);
}

// this line is used by starport scaffolding # proto/tx/message
message MsgCreate {
  option (gogoproto.goproto_getters) = false;

  string creator = 1;
  string denom = 2;
  string redeem_script = 3 [(gogoproto.moretags) = "yaml:\"redeem_script\""];
}

message MsgCreateResponse { }

message MsgBind {
  option (gogoproto.goproto_getters) = false;

  string creator = 1;
	string source_asset_denom = 2 [(gogoproto.moretags) = "yaml:\"source_asset_denom\""];
	uint64 to_chain_id = 3 [(gogoproto.moretags) = "yaml:\"to_chain_id\""];
	bytes to_asset_hash = 4 [(gogoproto.moretags) = "yaml:\"to_asset_hash\""];
}

message MsgBindResponse { }

message MsgLock {
  option (gogoproto.goproto_getters) = false;

	string from_address = 1 [(gogoproto.moretags) = "yaml:\"from_address\""];
	string source_asset_denom = 2 [(gogoproto.moretags) = "yaml:\"source_asset_denom\""];
	uint64 to_chain_id = 3 [(gogoproto.moretags) = "yaml:\"to_chain_id\""];
	bytes to_address_bytes = 4 [(gogoproto.moretags) = "yaml:\"to_address_bytes\""];
  string value = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags)   = "yaml:\"total_supply\"",
    (gogoproto.nullable)   = false
  ];
}

message MsgLockResponse { }
